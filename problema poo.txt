#include <iostream>
#include <cstring>
#include <exception>
#include <vector>

using namespace std;



template <typename T>
class Depozit {
    private:
        vector<T> obiecte;
    public:
        void adaugaObiect(const T& obiect) {
            obiecte.push_back(obiect);
        }

        void afiseazaObiecte() {
            for (const auto& obiect : obiecte) {
                cout << obiect << endl;
            }
        }
};


class DimensiuneColetZero : public std::exception {
public:
    const char* what() const noexcept override {
        return "Eroare: Dimensiunea coletului este zero.";
    }
};

class InterfataAngajat{
  public:
  
    virtual void afiseaza()=0;
    virtual void afiseaza(int tipAfișare)=0;
    virtual void calculeazaSalariu()=0;
    virtual bool estePromovat()=0;
    virtual ~InterfataAngajat(){
        
    }

};

class Angajat: public InterfataAngajat {
    private:
        char nume[50];
        int vechime;
        char functie[50];
        double salariu;
        static int numarAngajati;
        
    protected:
        int oreSuplimentare;
        double bonusOreSuplimentare;
        void calculeazaBonus() {
            bonusOreSuplimentare = oreSuplimentare * 10;
        }
        void set_salariu(double salariu) { this->salariu = salariu; }

    public:
        Angajat(const char* nume, int vechime, const char* functie, double salariu) {
            strcpy(this->nume, nume);
            this->vechime = vechime;
            strcpy(this->functie, functie);
            this->salariu = salariu;
            this->oreSuplimentare = 0;
            this->bonusOreSuplimentare = 0;
            numarAngajati++;
        }
        Angajat(){}
        
        static int get_numarAngajati() {
            return numarAngajati;
        }
        
        void calculeazaSalariu() override {
            calculeazaBonus();
            set_salariu(get_salariu() + bonusOreSuplimentare);
        }

        bool estePromovat() override {
            if (vechime >= 5 && strcmp(functie, "Programator") == 0) {
                return true;
            }
            return false;
        }
        const char* get_nume() { return nume; }
        int get_vechime(){ return vechime;}
        const char* get_functie() { return functie; }
        double get_salariu(){ return salariu;}
        
        void marire(Angajat x);
        
        friend istream& operator>>(istream& in, Angajat& angajat) {
            cout << "Introduceti numele angajatului: ";
            in >> angajat.nume;
            cout << "Introduceti vechimea angajatului: ";
            in >> angajat.vechime;
            cout << "Introduceti functia angajatului: ";
            in >> angajat.functie;
            cout << "Introduceti salariul angajatului: ";
            in >> angajat.salariu;

            return in;
        }
        friend ostream& operator<<(ostream& out, const Angajat& angajat) {
            out << "Nume angajat: " << angajat.nume << "\n"
                << "Vechime: " << angajat.vechime << " ani\n"
                << "Functie: " << angajat.functie << "\n"
                << "Salariu: " << angajat.salariu << " RON"<<"\n";
            return out;
        }
        void afiseaza() override {
            cout << "Nume: " << nume << ", Vechime: " << vechime << ", Functie: " << functie << ", Salariu: " << salariu << endl;
        }
        
        void afiseaza(int tipAfișare) override {
            if (tipAfișare == 1) {
                cout << "Nume: " << nume << ", Functie: " << functie << ", Salariu: " << salariu << endl;
            } else 
                if (tipAfișare == 2)
                    cout << "Nume: " << nume << ", Vechime: " << vechime << ", Salariu: " << salariu << endl;
        }
};

int Angajat::numarAngajati = 0;


class Client {
    private:
        char nume[50];
        char adresa[100];
        int codPostal;
    public:
        Client(const char* nume, const char* adresa, int codPostal) {
            strcpy(this->nume, nume);
            strcpy(this->adresa, adresa);
            this->codPostal = codPostal;
        }
        Client(){}

        const char* get_nume() { return nume; }
        const char* get_adresa() { return adresa; }
        int get_codPostal(){ return codPostal;}
};

class Colet {
    private:
        int id;
        Client client;
        double greutate;
        double dimensiuni[3];
        char adresaDestinatie[100];
    public:
        Colet(int id, Client client, double greutate, double dimensiuni[3], const char* adresaDestinatie) {
            if (dimensiuni[0] * dimensiuni[1] * dimensiuni[2] == 0) {
                throw DimensiuneColetZero();
            }
            this->id = id;
            this->client = client;
            this->greutate = greutate;
            for(int i = 0; i < 3; i++) {
                this->dimensiuni[i] = dimensiuni[i];
            }
            strcpy(this->adresaDestinatie, adresaDestinatie);
        }
        Colet(){}
        friend ostream& operator<<(ostream& out, const Colet& colet) {
    out << "ID Colet: " << colet.id << "\n"
        << "Greutate: " << colet.greutate << " kg\n"
        << "Dimensiuni: " << colet.dimensiuni[0] << " x " << colet.dimensiuni[1] << " x " << colet.dimensiuni[2] << "\n"
        << "Adresa Destinatie: " << colet.adresaDestinatie << "\n";
    return out;
}

        double get_dimensiune(){ return dimensiuni[0]*dimensiuni[1]*dimensiuni[2];}
        double get_greutate() const {return greutate;}
};

class Masina {
    private:
        Angajat angajat;
        char numarInmatriculare[10];
        char marca[50];
        char model[50];
    public:
        Masina(Angajat angajat, const char* numarInmatriculare, const char* marca, const char* model) {
            this->angajat = angajat;
            strcpy(this->numarInmatriculare, numarInmatriculare);
            strcpy(this->marca, marca);
            strcpy(this->model, model);
        }
        Masina(){}

};

class Livrare {
    private:
        Colet colet;
        Masina masina;
        Angajat angajat;
        char dataLivrare[20];
        float pret;
    public:
        Livrare(Colet colet, Masina masina, Angajat angajat, const char* dataLivrare, float pret) {
            this->colet = colet;
            this->masina = masina;
            this->angajat = angajat;
            strcpy(this->dataLivrare, dataLivrare);
            this->pret = pret;
        }
        Livrare(){}
        
        void verificare_dimensiune(Colet x);

};

class TabelAngajati {
    private:
        Angajat* angajati;
        int nrAngajati;
    public:
        TabelAngajati() {
            nrAngajati = 0;
            angajati = nullptr;
        }

        ~TabelAngajati() {
            delete[] angajati;
        }

        void adaugaAngajat(const Angajat& angajat) {
            Angajat* temp = new Angajat[nrAngajati + 1];
            for (int i = 0; i < nrAngajati; ++i) {
                temp[i] = angajati[i];
            }
            temp[nrAngajati] = angajat;
            ++nrAngajati;

            delete[] angajati;
            angajati = temp;
        }

        double calculeazaSalariuMediu() {
            if (nrAngajati == 0) {
                return 0;
            }

            double sumaSalarii = 0;
            for (int i = 0; i < nrAngajati; ++i) {
                sumaSalarii += angajati[i].get_salariu();
            }

            return sumaSalarii / nrAngajati;
        }
};

void Livrare::verificare_dimensiune(Colet colet)
{
    if(colet.get_dimensiune()>1000000)
        cout<<"NU INCAPE"<<endl;
    else
        cout<<"INCAPE"<<endl;
}
    
void Angajat::marire(Angajat angajat)
{
    if(strcmp(angajat.get_functie(), "Director") == 0 && angajat.get_vechime()>=3 && angajat.get_salariu()<5000)
        {
            cout<<"Salariul lui "<<angajat.get_nume()<<" trebuie marit cu "<<angajat.get_salariu()/10<<" RON"<<endl;
        }
    else
        cout<<"Salariul nu trebuie marit"<<endl;
}


class AngajatCuConcediu : public Angajat {
    private:
        int zileConcediu;
    public:
        AngajatCuConcediu(const char* nume, int vechime, const char* functie, double salariu, int zileConcediu)
            : Angajat(nume, vechime, functie, salariu) {
            this->zileConcediu = zileConcediu;
        }

        int get_zileConcediu() { return zileConcediu; }

        void iaConcediu(int zile) {
            if (zile > zileConcediu) {
                cout << "Nu sunt suficiente zile de concediu disponibile." << endl;
            } else {
                zileConcediu -= zile;
                cout << "Angajatul " << get_nume() << " și-a luat " << zile << " zile de concediu. Mai are " << zileConcediu << " zile de concediu disponibile." << endl;
            }
        }
};

class ComandaPrioritara : public Colet, public Client {
    private:
        bool livrareUrgenta;
    public:
        ComandaPrioritara(int id, Client client, double greutate, double dimensiuni[3], const char* adresaDestinatie, const char* nume, const char* adresa, int codPostal, bool livrareUrgenta)
            : Colet(id, client, greutate, dimensiuni, adresaDestinatie), Client(nume, adresa, codPostal), livrareUrgenta(livrareUrgenta) {
        }
        void verificare_prioritate()
        {
            if(get_greutate()<10 && get_codPostal() == 700065 && livrareUrgenta==true)
                cout<<"Aceasta comanda este prioritara"<<endl;
            else
                cout<<"Aceasta comanda NU este prioritara"<<endl;
        }
};

    template <typename T>
    double calculeazaCostLivrare(const T& colet, double costPerKg) {
        return colet.get_greutate() * costPerKg;
}


int main()
{
    InterfataAngajat* angajati[2];
    
    angajati[0] = new Angajat("Ion Popescu", 6, "Programator", 4000);
    angajati[1] = new AngajatCuConcediu("Ana Ionescu", 3, "Manager", 4500, 20);

    for (int i = 0; i < 2; i++) {
        angajati[i]->afiseaza();
        angajati[i]->calculeazaSalariu();
        cout << "Salariul dupa calcul: " << dynamic_cast<Angajat*>(angajati[i])->get_salariu() << endl;
        cout << "Promovat: " << (angajati[i]->estePromovat() ? "Da" : "Nu") << endl;
    }

    for (int i = 0; i < 2; i++) {
        delete angajati[i];
    }
    
    Angajat angajat1("Ion Popescu", 6, "Programator", 4500);
    Angajat angajat2("Maria Ionescu", 3, "Manager", 6000);

    cout << "Inainte de calculul salariului:\n";
    angajat1.afiseaza();
    angajat2.afiseaza();

    angajat1.calculeazaSalariu();
    angajat2.calculeazaSalariu();

    cout << "Dupa calculul salariului:\n";
    angajat1.afiseaza();
    angajat2.afiseaza();

    cout << "Angajatul 1 " << (angajat1.estePromovat() ? "este" : "nu este") << " promovat.\n";
    cout << "Angajatul 2 " << (angajat2.estePromovat() ? "este" : "nu este") << " promovat.\n";

    
    Client client1("Dan Mihai", "Str. Florilor, Nr. 10", 500012);
    Client client2("Ana Popa", "Bd. Stefan cel Mare, Nr. 50", 700065);

    

    double dimensiuniColet1[3] = {30, 200, 400};
    Colet colet1(1, client1, 2.5, dimensiuniColet1, "Bucuresti, Str. Ion Mihalache, Nr. 20");
    double dimensiuniColet2[3] = {40, 30, 50};
    Colet colet2(2, client2, 3.2, dimensiuniColet2, "Cluj-Napoca, Str. Avram Iancu, Nr. 50");

    

    Masina masina1(angajat1, "B 123 ABC", "Ford", "Transit");
    Masina masina2(angajat2, "CJ 02 XYZ", "Renault", "Kangoo");

   

    Livrare livrare1(colet1, masina1, angajat1, "2023-03-28", 15.00);
    Livrare livrare2(colet2, masina2, angajat2, "2023-03-29", 20.00);

    cout << "Colet 1: ";
    livrare1.verificare_dimensiune(colet1);
    cout << "Colet 2: ";
    livrare2.verificare_dimensiune(colet2);

    cout << "Angajat 1: ";
    angajat1.marire(angajat1);
    cout << "Angajat 2: ";
    angajat2.marire(angajat2);
    
    TabelAngajati tabel;
    tabel.adaugaAngajat(angajat1);
    tabel.adaugaAngajat(angajat2);

    cout << "Salariul mediu al angajatilor: " << tabel.calculeazaSalariuMediu() << " RON" <<endl;
    
    Angajat angajat3;
    cin >> angajat3;
    cout << angajat3;
    
    cout << "Afișare angajat1 (tip 1):" << endl;
    angajat1.afiseaza(1);

    cout << "Afișare angajat1 (tip 2):" << endl;
    angajat1.afiseaza(2);

    cout << "Afișare angajat1 ():" << endl;
    angajat1.afiseaza();
    
    
    
    AngajatCuConcediu angajatCuConcediu("Elena Popescu", 7, "Manager", 4000, 10);
    cout << "Angajat cu concediu: " << angajatCuConcediu.get_nume() << ", zile concediu: " << angajatCuConcediu.get_zileConcediu() << endl;

    angajatCuConcediu.iaConcediu(4); // angajatul își ia 4 zile de concediu
    angajatCuConcediu.iaConcediu(8); // încearcă să ia 8 zile de concediu, dar nu are suficiente zile disponibile
    double dimensiuniColet3[3] = {20, 40, 60};
    ComandaPrioritara comandaPrioritara(3, client1, 3.5, dimensiuniColet3, "Bucuresti, Str. Victoriei, Nr. 15", "Andrei Popescu", "Str. Lalelelor, Nr. 20", 600011, true);
    comandaPrioritara.verificare_prioritate();
    
    try {
        double dimensiuni[3] = {0, 0, 0};
        Client client("Ion Popescu", "Strada Lalelelor, nr. 5", 700065);
        Colet colet(1, client, 5, dimensiuni, "Strada Trandafirilor, nr. 8");
    } catch (const DimensiuneColetZero& e) {
        cerr << e.what() << endl;
    }
    
    cout << "Numarul total de angajati: " << Angajat::get_numarAngajati() << endl;

    Depozit<Colet> depozit;

    depozit.adaugaObiect(colet1);
    depozit.adaugaObiect(colet2);

    depozit.afiseazaObiecte();
    
    
    double costPerKg = 5.0;
    double costLivrareColet1 = calculeazaCostLivrare(colet1, costPerKg);
    double costLivrareColet2 = calculeazaCostLivrare(colet2, costPerKg);

    cout << "Costul livrarii coletului 1 este: " << costLivrareColet1 << " RON" << endl;
    cout << "Costul livrarii coletului 2 este: " << costLivrareColet2 << " RON" << endl;



    return 0;
}

   
